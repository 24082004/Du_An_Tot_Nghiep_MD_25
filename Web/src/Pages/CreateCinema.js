import React, { useState } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Select, 
  Upload, 
  TimePicker, 
  InputNumber,
  Switch,
  Row,
  Col,
  Divider,
  Steps,
  message,
  Space,
  Tag,
  Image,
  Alert
} from 'antd';
import { 
  PlusOutlined, 
  UploadOutlined, 
  SaveOutlined,
  ArrowLeftOutlined,
  EnvironmentOutlined,
  PhoneOutlined,
  MailOutlined,
  ClockCircleOutlined,
  HomeOutlined,
  TeamOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';
import './CreateCinema.css';

const { TextArea } = Input;
const { Option } = Select;
const { Step } = Steps;

const CreateCinema = ({ onBack, onSave }) => {
  const [form] = Form.useForm();
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [imageList, setImageList] = useState([]);
  const [selectedFacilities, setSelectedFacilities] = useState([]);

  // Danh s√°ch ti·ªán √≠ch c√≥ s·∫µn
  const facilityOptions = [
    { value: 'parking', label: 'B√£i ƒë·ªó xe', icon: 'üÖøÔ∏è', color: '#1890ff' },
    { value: '3d', label: 'M√†n h√¨nh 3D', icon: 'ü•Ω', color: '#52c41a' },
    { value: 'imax', label: 'IMAX', icon: 'üé¨', color: '#722ed1' },
    { value: '4dx', label: '4DX', icon: 'üí∫', color: '#fa541c' },
    { value: 'vip', label: 'Ph√≤ng VIP', icon: 'üëë', color: '#faad14' },
    { value: 'food_court', label: 'Khu ·∫©m th·ª±c', icon: 'üçø', color: '#eb2f96' },
    { value: 'game_zone', label: 'Khu vui ch∆°i', icon: 'üéÆ', color: '#13c2c2' },
    { value: 'wifi', label: 'WiFi mi·ªÖn ph√≠', icon: 'üì∂', color: '#1890ff' },
    { value: 'air_condition', label: 'ƒêi·ªÅu h√≤a', icon: '‚ùÑÔ∏è', color: '#52c41a' },
    { value: 'accessibility', label: 'Ti·∫øp c·∫≠n khuy·∫øt t·∫≠t', icon: '‚ôø', color: '#722ed1' }
  ];

  // Danh s√°ch th√†nh ph·ªë
  const cities = [
    'H√† N·ªôi', 'H·ªì Ch√≠ Minh', 'ƒê√† N·∫µng', 'C·∫ßn Th∆°', 'H·∫£i Ph√≤ng',
    'B√¨nh D∆∞∆°ng', 'ƒê·ªìng Nai', 'Kh√°nh H√≤a', 'L√¢m ƒê·ªìng', 'Qu·∫£ng Nam'
  ];

  const steps = [
    {
      title: 'Th√¥ng tin c∆° b·∫£n',
      icon: <HomeOutlined />,
      description: 'T√™n r·∫°p v√† th√¥ng tin li√™n h·ªá'
    },
    {
      title: 'ƒê·ªãa ch·ªâ & V·ªã tr√≠',
      icon: <EnvironmentOutlined />,
      description: 'ƒê·ªãa ch·ªâ chi ti·∫øt v√† v·ªã tr√≠'
    },
    {
      title: 'Ti·ªán √≠ch & D·ªãch v·ª•',
      icon: <TeamOutlined />,
      description: 'C√°c ti·ªán √≠ch v√† d·ªãch v·ª•'
    },
    {
      title: 'H√¨nh ·∫£nh & Ho√†n th√†nh',
      icon: <SaveOutlined />,
      description: 'Upload h√¨nh ·∫£nh v√† x√°c nh·∫≠n'
    }
  ];

  const handleNext = async () => {
    try {
      const values = await form.validateFields();
      if (currentStep < steps.length - 1) {
        setCurrentStep(currentStep + 1);
      }
    } catch (error) {
      message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
    }
  };

  const handlePrev = () => {
    setCurrentStep(currentStep - 1);
  };

  const handleFacilityToggle = (facilityValue) => {
    const newFacilities = selectedFacilities.includes(facilityValue)
      ? selectedFacilities.filter(f => f !== facilityValue)
      : [...selectedFacilities, facilityValue];
    setSelectedFacilities(newFacilities);
    form.setFieldsValue({ facilities: newFacilities });
  };

  const handleImageUpload = ({ fileList }) => {
    setImageList(fileList);
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      const values = await form.validateFields();
      
      const cinemaData = {
        ...values,
        facilities: selectedFacilities,
        images: imageList.map(img => img.url || img.response?.url),
        openTime: values.openTime?.format('HH:mm'),
        closeTime: values.closeTime?.format('HH:mm'),
        createdAt: new Date().toISOString(),
        status: 'active'
      };

      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      message.success('T·∫°o r·∫°p chi·∫øu phim th√†nh c√¥ng!');
      if (onSave) {
        onSave(cinemaData);
      }
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra khi t·∫°o r·∫°p');
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="step-content">
            <Row gutter={[24, 16]}>
              <Col span={24}>
                <Alert
                  message="Th√¥ng tin c∆° b·∫£n"
                  description="Nh·∫≠p t√™n r·∫°p v√† c√°c th√¥ng tin li√™n h·ªá c∆° b·∫£n"
                  type="info"
                  showIcon
                  style={{ marginBottom: 24 }}
                />
              </Col>
              
              <Col xs={24} lg={12}>
                <Form.Item
                  name="name"
                  label="T√™n r·∫°p chi·∫øu phim"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n r·∫°p' }]}
                >
                  <Input 
                    prefix={<HomeOutlined />}
                    placeholder="VD: CGV Vincom Center"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="manager"
                  label="Qu·∫£n l√Ω r·∫°p"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n qu·∫£n l√Ω' }]}
                >
                  <Input 
                    prefix={<TeamOutlined />}
                    placeholder="VD: Nguy·ªÖn VƒÉn A"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="phone"
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
                    { pattern: /^[0-9]{10,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá' }
                  ]}
                >
                  <Input 
                    prefix={<PhoneOutlined />}
                    placeholder="VD: 024-3936-3636"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="email"
                  label="Email"
                  rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                    { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' }
                  ]}
                >
                  <Input 
                    prefix={<MailOutlined />}
                    placeholder="VD: info@cgv.vn"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="totalScreens"
                  label="S·ªë ph√≤ng chi·∫øu"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ph√≤ng chi·∫øu' }]}
                >
                  <InputNumber
                    min={1}
                    max={50}
                    placeholder="VD: 8"
                    size="large"
                    style={{ width: '100%' }}
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="capacity"
                  label="T·ªïng s·ªë gh·∫ø"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t·ªïng s·ªë gh·∫ø' }]}
                >
                  <InputNumber
                    min={50}
                    max={5000}
                    placeholder="VD: 1200"
                    size="large"
                    style={{ width: '100%' }}
                  />
                </Form.Item>
              </Col>
            </Row>
          </div>
        );

      case 1:
        return (
          <div className="step-content">
            <Row gutter={[24, 16]}>
              <Col span={24}>
                <Alert
                  message="Th√¥ng tin ƒë·ªãa ch·ªâ"
                  description="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt v√† v·ªã tr√≠ c·ªßa r·∫°p"
                  type="info"
                  showIcon
                  style={{ marginBottom: 24 }}
                />
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="city"
                  label="Th√†nh ph·ªë"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th√†nh ph·ªë' }]}
                >
                  <Select
                    placeholder="Ch·ªçn th√†nh ph·ªë"
                    size="large"
                    showSearch
                    filterOption={(input, option) =>
                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                    }
                  >
                    {cities.map(city => (
                      <Option key={city} value={city}>{city}</Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="district"
                  label="Qu·∫≠n/Huy·ªán"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p qu·∫≠n/huy·ªán' }]}
                >
                  <Input 
                    placeholder="VD: Hai B√† Tr∆∞ng"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item
                  name="address"
                  label="ƒê·ªãa ch·ªâ chi ti·∫øt"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt' }]}
                >
                  <Input 
                    prefix={<EnvironmentOutlined />}
                    placeholder="VD: 191 B√† Tri·ªáu"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="latitude"
                  label="Vƒ© ƒë·ªô (Latitude)"
                >
                  <InputNumber
                    placeholder="VD: 21.0285"
                    size="large"
                    style={{ width: '100%' }}
                    step={0.000001}
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="longitude"
                  label="Kinh ƒë·ªô (Longitude)"
                >
                  <InputNumber
                    placeholder="VD: 105.8542"
                    size="large"
                    style={{ width: '100%' }}
                    step={0.000001}
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="openTime"
                  label="Gi·ªù m·ªü c·ª≠a"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªù m·ªü c·ª≠a' }]}
                >
                  <TimePicker
                    format="HH:mm"
                    placeholder="Ch·ªçn gi·ªù m·ªü c·ª≠a"
                    size="large"
                    style={{ width: '100%' }}
                    defaultValue={dayjs('08:00', 'HH:mm')}
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="closeTime"
                  label="Gi·ªù ƒë√≥ng c·ª≠a"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªù ƒë√≥ng c·ª≠a' }]}
                >
                  <TimePicker
                    format="HH:mm"
                    placeholder="Ch·ªçn gi·ªù ƒë√≥ng c·ª≠a"
                    size="large"
                    style={{ width: '100%' }}
                    defaultValue={dayjs('23:00', 'HH:mm')}
                  />
                </Form.Item>
              </Col>
            </Row>
          </div>
        );

      case 2:
        return (
          <div className="step-content">
            <Row gutter={[24, 24]}>
              <Col span={24}>
                <Alert
                  message="Ti·ªán √≠ch v√† d·ªãch v·ª•"
                  description="Ch·ªçn c√°c ti·ªán √≠ch v√† d·ªãch v·ª• c√≥ t·∫°i r·∫°p"
                  type="info"
                  showIcon
                  style={{ marginBottom: 24 }}
                />
              </Col>

              <Col span={24}>
                <Form.Item name="facilities" label="Ti·ªán √≠ch c√≥ s·∫µn">
                  <div className="facilities-grid">
                    {facilityOptions.map(facility => (
                      <div
                        key={facility.value}
                        className={`facility-card ${selectedFacilities.includes(facility.value) ? 'selected' : ''}`}
                        onClick={() => handleFacilityToggle(facility.value)}
                      >
                        <div className="facility-icon" style={{ color: facility.color }}>
                          {facility.icon}
                        </div>
                        <div className="facility-label">{facility.label}</div>
                      </div>
                    ))}
                  </div>
                </Form.Item>
              </Col>

              <Col span={24}>
                <Divider>Th√¥ng tin b·ªï sung</Divider>
              </Col>

              <Col span={24}>
                <Form.Item
                  name="description"
                  label="M√¥ t·∫£ v·ªÅ r·∫°p"
                >
                  <TextArea
                    rows={4}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ r·∫°p chi·∫øu phim, c√°c ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t..."
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="website"
                  label="Website"
                >
                  <Input 
                    placeholder="VD: https://www.cgv.vn"
                    size="large"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} lg={12}>
                <Form.Item
                  name="socialMedia"
                  label="Facebook/Social Media"
                >
                  <Input 
                    placeholder="VD: https://facebook.com/cgvcinemas"
                    size="large"
                  />
                </Form.Item>
              </Col>
            </Row>
          </div>
        );

      case 3:
        return (
          <div className="step-content">
            <Row gutter={[24, 24]}>
              <Col span={24}>
                <Alert
                  message="H√¨nh ·∫£nh v√† ho√†n th√†nh"
                  description="Upload h√¨nh ·∫£nh r·∫°p v√† xem l·∫°i th√¥ng tin tr∆∞·ªõc khi l∆∞u"
                  type="success"
                  showIcon
                  style={{ marginBottom: 24 }}
                />
              </Col>

              <Col span={24}>
                <Form.Item
                  name="images"
                  label="H√¨nh ·∫£nh r·∫°p"
                >
                  <Upload
                    listType="picture-card"
                    fileList={imageList}
                    onChange={handleImageUpload}
                    beforeUpload={() => false}
                    multiple
                  >
                    {imageList.length >= 8 ? null : (
                      <div>
                        <PlusOutlined />
                        <div style={{ marginTop: 8 }}>Upload</div>
                      </div>
                    )}
                  </Upload>
                  <div style={{ marginTop: 8, color: '#666' }}>
                    * C√≥ th·ªÉ upload t·ªëi ƒëa 8 h√¨nh ·∫£nh. ƒê·ªãnh d·∫°ng: JPG, PNG
                  </div>
                </Form.Item>
              </Col>

              <Col span={24}>
                <Card title="Xem l·∫°i th√¥ng tin" style={{ marginTop: 16 }}>
                  <Row gutter={[16, 16]}>
                    <Col xs={24} lg={12}>
                      <div className="review-item">
                        <strong>T√™n r·∫°p:</strong> {form.getFieldValue('name')}
                      </div>
                      <div className="review-item">
                        <strong>Qu·∫£n l√Ω:</strong> {form.getFieldValue('manager')}
                      </div>
                      <div className="review-item">
                        <strong>S·ªë ph√≤ng chi·∫øu:</strong> {form.getFieldValue('totalScreens')}
                      </div>
                    </Col>
                    <Col xs={24} lg={12}>
                      <div className="review-item">
                        <strong>ƒê·ªãa ch·ªâ:</strong> {form.getFieldValue('address')}, {form.getFieldValue('district')}, {form.getFieldValue('city')}
                      </div>
                      <div className="review-item">
                        <strong>Li√™n h·ªá:</strong> {form.getFieldValue('phone')} | {form.getFieldValue('email')}
                      </div>
                    </Col>
                    <Col span={24}>
                      <div className="review-item">
                        <strong>Ti·ªán √≠ch:</strong>
                        <div style={{ marginTop: 8 }}>
                          {selectedFacilities.map(facilityValue => {
                            const facility = facilityOptions.find(f => f.value === facilityValue);
                            return (
                              <Tag key={facilityValue} color={facility?.color} style={{ margin: '2px' }}>
                                {facility?.icon} {facility?.label}
                              </Tag>
                            );
                          })}
                        </div>
                      </div>
                    </Col>
                  </Row>
                </Card>
              </Col>
            </Row>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="create-cinema-container">
      <Card className="create-cinema-card">
        <div className="create-cinema-header">
          <Button 
            icon={<ArrowLeftOutlined />} 
            onClick={onBack}
            type="text"
            size="large"
          >
            Quay l·∫°i
          </Button>
          <h2>T·∫°o r·∫°p chi·∫øu phim m·ªõi</h2>
          <div></div>
        </div>

        <Steps current={currentStep} className="create-cinema-steps">
          {steps.map((step, index) => (
            <Step
              key={index}
              title={step.title}
              description={step.description}
              icon={step.icon}
            />
          ))}
        </Steps>

        <Form
          form={form}
          layout="vertical"
          className="create-cinema-form"
        >
          {renderStepContent()}
        </Form>

        <div className="create-cinema-actions">
          {currentStep > 0 && (
            <Button size="large" onClick={handlePrev}>
              Quay l·∫°i
            </Button>
          )}
          <div className="actions-right">
            {currentStep < steps.length - 1 ? (
              <Button type="primary" size="large" onClick={handleNext}>
                Ti·∫øp theo
              </Button>
            ) : (
              <Button
                type="primary"
                size="large"
                icon={<SaveOutlined />}
                loading={loading}
                onClick={handleSubmit}
              >
                T·∫°o r·∫°p
              </Button>
            )}
          </div>
        </div>
      </Card>
    </div>
  );
};

export default CreateCinema;
